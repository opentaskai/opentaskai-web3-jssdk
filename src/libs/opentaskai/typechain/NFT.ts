/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from 'ethers';
import { BytesLike } from '@ethersproject/bytes';
import { Listener, Provider } from '@ethersproject/providers';
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi';
import { TypedEventFilter, TypedEvent, TypedListener } from './commons';

interface NFTInterface extends ethers.utils.Interface {
  functions: {
    'admin()': FunctionFragment;
    'approve(address,uint256)': FunctionFragment;
    'balanceOf(address)': FunctionFragment;
    'changeNameAndSymbol(string,string)': FunctionFragment;
    'changeOwner(address)': FunctionFragment;
    'claimCount(address)': FunctionFragment;
    'claimLimit()': FunctionFragment;
    'config()': FunctionFragment;
    'dev()': FunctionFragment;
    'exists(uint256)': FunctionFragment;
    'getApproved(uint256)': FunctionFragment;
    'getTokens(address)': FunctionFragment;
    'initialize(string,string)': FunctionFragment;
    'isApprovedForAll(address,address)': FunctionFragment;
    'maxTotalSupply()': FunctionFragment;
    'mint(bytes32,uint256,bytes)': FunctionFragment;
    'mintTo(address,bytes32)': FunctionFragment;
    'name()': FunctionFragment;
    'owner()': FunctionFragment;
    'ownerOf(uint256)': FunctionFragment;
    'records(bytes32)': FunctionFragment;
    'safeTransferFrom(address,address,uint256)': FunctionFragment;
    'setApprovalForAll(address,bool)': FunctionFragment;
    'setClaimLimit(uint256)': FunctionFragment;
    'setMaxTotalSupply(uint256)': FunctionFragment;
    'setSigner(address)': FunctionFragment;
    'setSignerContract(address,bytes32)': FunctionFragment;
    'setURI(string,string)': FunctionFragment;
    'setupConfig(address)': FunctionFragment;
    'signer()': FunctionFragment;
    'supportsInterface(bytes4)': FunctionFragment;
    'symbol()': FunctionFragment;
    'tokenByIndex(uint256)': FunctionFragment;
    'tokenOfOwnerByIndex(address,uint256)': FunctionFragment;
    'tokenURI(uint256)': FunctionFragment;
    'totalSupply()': FunctionFragment;
    'transferFrom(address,address,uint256)': FunctionFragment;
    'verifyMessage(bytes32,bytes)': FunctionFragment;
  };

  encodeFunctionData(functionFragment: 'admin', values?: undefined): string;
  encodeFunctionData(functionFragment: 'approve', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'balanceOf', values: [string]): string;
  encodeFunctionData(functionFragment: 'changeNameAndSymbol', values: [string, string]): string;
  encodeFunctionData(functionFragment: 'changeOwner', values: [string]): string;
  encodeFunctionData(functionFragment: 'claimCount', values: [string]): string;
  encodeFunctionData(functionFragment: 'claimLimit', values?: undefined): string;
  encodeFunctionData(functionFragment: 'config', values?: undefined): string;
  encodeFunctionData(functionFragment: 'dev', values?: undefined): string;
  encodeFunctionData(functionFragment: 'exists', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'getApproved', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'getTokens', values: [string]): string;
  encodeFunctionData(functionFragment: 'initialize', values: [string, string]): string;
  encodeFunctionData(functionFragment: 'isApprovedForAll', values: [string, string]): string;
  encodeFunctionData(functionFragment: 'maxTotalSupply', values?: undefined): string;
  encodeFunctionData(functionFragment: 'mint', values: [BytesLike, BigNumberish, BytesLike]): string;
  encodeFunctionData(functionFragment: 'mintTo', values: [string, BytesLike]): string;
  encodeFunctionData(functionFragment: 'name', values?: undefined): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'ownerOf', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'records', values: [BytesLike]): string;
  encodeFunctionData(functionFragment: 'safeTransferFrom', values: [string, string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'setApprovalForAll', values: [string, boolean]): string;
  encodeFunctionData(functionFragment: 'setClaimLimit', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'setMaxTotalSupply', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'setSigner', values: [string]): string;
  encodeFunctionData(functionFragment: 'setSignerContract', values: [string, BytesLike]): string;
  encodeFunctionData(functionFragment: 'setURI', values: [string, string]): string;
  encodeFunctionData(functionFragment: 'setupConfig', values: [string]): string;
  encodeFunctionData(functionFragment: 'signer', values?: undefined): string;
  encodeFunctionData(functionFragment: 'supportsInterface', values: [BytesLike]): string;
  encodeFunctionData(functionFragment: 'symbol', values?: undefined): string;
  encodeFunctionData(functionFragment: 'tokenByIndex', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'tokenOfOwnerByIndex', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'tokenURI', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'totalSupply', values?: undefined): string;
  encodeFunctionData(functionFragment: 'transferFrom', values: [string, string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'verifyMessage', values: [BytesLike, BytesLike]): string;

  decodeFunctionResult(functionFragment: 'admin', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'approve', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'balanceOf', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'changeNameAndSymbol', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'changeOwner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'claimCount', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'claimLimit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'config', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'dev', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'exists', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getApproved', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getTokens', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isApprovedForAll', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'maxTotalSupply', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'mint', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'mintTo', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'name', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'ownerOf', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'records', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'safeTransferFrom', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setApprovalForAll', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setClaimLimit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setMaxTotalSupply', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setSigner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setSignerContract', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setURI', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setupConfig', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'signer', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'supportsInterface', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'symbol', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'tokenByIndex', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'tokenOfOwnerByIndex', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'tokenURI', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalSupply', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferFrom', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'verifyMessage', data: BytesLike): Result;

  events: {
    'Approval(address,address,uint256)': EventFragment;
    'ApprovalForAll(address,address,bool)': EventFragment;
    'ConfigChanged(address,address,address)': EventFragment;
    'MintLog(address,uint256,bytes32)': EventFragment;
    'OwnerChanged(address,address,address)': EventFragment;
    'Transfer(address,address,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'Approval'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ApprovalForAll'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ConfigChanged'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'MintLog'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnerChanged'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Transfer'): EventFragment;
}

export interface NFT extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: NFTInterface;

  functions: {
    admin(overrides?: CallOverrides): Promise<[string]>;

    'admin()'(overrides?: CallOverrides): Promise<[string]>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'approve(address,uint256)'(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    'balanceOf(address)'(owner: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    changeNameAndSymbol(
      _name: string,
      _symbol: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'changeNameAndSymbol(string,string)'(
      _name: string,
      _symbol: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    changeOwner(
      _user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'changeOwner(address)'(
      _user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimCount(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    'claimCount(address)'(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    claimLimit(overrides?: CallOverrides): Promise<[BigNumber]>;

    'claimLimit()'(overrides?: CallOverrides): Promise<[BigNumber]>;

    config(overrides?: CallOverrides): Promise<[string]>;

    'config()'(overrides?: CallOverrides): Promise<[string]>;

    dev(overrides?: CallOverrides): Promise<[string]>;

    'dev()'(overrides?: CallOverrides): Promise<[string]>;

    exists(_tokenId: BigNumberish, overrides?: CallOverrides): Promise<[boolean]>;

    'exists(uint256)'(_tokenId: BigNumberish, overrides?: CallOverrides): Promise<[boolean]>;

    getApproved(tokenId: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    'getApproved(uint256)'(tokenId: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    getTokens(_account: string, overrides?: CallOverrides): Promise<[BigNumber[]]>;

    'getTokens(address)'(_account: string, overrides?: CallOverrides): Promise<[BigNumber[]]>;

    initialize(
      _name: string,
      _symbol: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'initialize(string,string)'(
      _name: string,
      _symbol: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isApprovedForAll(owner: string, operator: string, overrides?: CallOverrides): Promise<[boolean]>;

    'isApprovedForAll(address,address)'(owner: string, operator: string, overrides?: CallOverrides): Promise<[boolean]>;

    maxTotalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    'maxTotalSupply()'(overrides?: CallOverrides): Promise<[BigNumber]>;

    mint(
      _sn: BytesLike,
      _expired: BigNumberish,
      _signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'mint(bytes32,uint256,bytes)'(
      _sn: BytesLike,
      _expired: BigNumberish,
      _signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mintTo(
      _to: string,
      _sn: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'mintTo(address,bytes32)'(
      _to: string,
      _sn: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    'name()'(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    'owner()'(overrides?: CallOverrides): Promise<[string]>;

    ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    'ownerOf(uint256)'(tokenId: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    records(arg0: BytesLike, overrides?: CallOverrides): Promise<[BigNumber]>;

    'records(bytes32)'(arg0: BytesLike, overrides?: CallOverrides): Promise<[BigNumber]>;

    'safeTransferFrom(address,address,uint256)'(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'safeTransferFrom(address,address,uint256,bytes)'(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'setApprovalForAll(address,bool)'(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setClaimLimit(
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'setClaimLimit(uint256)'(
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMaxTotalSupply(
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'setMaxTotalSupply(uint256)'(
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setSigner(_user: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    'setSigner(address)'(
      _user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setSignerContract(
      _signer: string,
      _hash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'setSignerContract(address,bytes32)'(
      _signer: string,
      _hash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setURI(
      _base_uri: string,
      _suffix: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'setURI(string,string)'(
      _base_uri: string,
      _suffix: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setupConfig(
      _config: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'setupConfig(address)'(
      _config: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    signer(overrides?: CallOverrides): Promise<[string]>;

    'signer()'(overrides?: CallOverrides): Promise<[string]>;

    supportsInterface(interfaceId: BytesLike, overrides?: CallOverrides): Promise<[boolean]>;

    'supportsInterface(bytes4)'(interfaceId: BytesLike, overrides?: CallOverrides): Promise<[boolean]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    'symbol()'(overrides?: CallOverrides): Promise<[string]>;

    tokenByIndex(index: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    'tokenByIndex(uint256)'(index: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    tokenOfOwnerByIndex(owner: string, index: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    'tokenOfOwnerByIndex(address,uint256)'(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    tokenURI(_tokenId: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    'tokenURI(uint256)'(_tokenId: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    'totalSupply()'(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'transferFrom(address,address,uint256)'(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    verifyMessage(_messageHash: BytesLike, _signature: BytesLike, overrides?: CallOverrides): Promise<[boolean]>;

    'verifyMessage(bytes32,bytes)'(
      _messageHash: BytesLike,
      _signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  admin(overrides?: CallOverrides): Promise<string>;

  'admin()'(overrides?: CallOverrides): Promise<string>;

  approve(
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'approve(address,uint256)'(
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

  'balanceOf(address)'(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

  changeNameAndSymbol(
    _name: string,
    _symbol: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'changeNameAndSymbol(string,string)'(
    _name: string,
    _symbol: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  changeOwner(_user: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  'changeOwner(address)'(
    _user: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimCount(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  'claimCount(address)'(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  claimLimit(overrides?: CallOverrides): Promise<BigNumber>;

  'claimLimit()'(overrides?: CallOverrides): Promise<BigNumber>;

  config(overrides?: CallOverrides): Promise<string>;

  'config()'(overrides?: CallOverrides): Promise<string>;

  dev(overrides?: CallOverrides): Promise<string>;

  'dev()'(overrides?: CallOverrides): Promise<string>;

  exists(_tokenId: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

  'exists(uint256)'(_tokenId: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

  getApproved(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  'getApproved(uint256)'(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  getTokens(_account: string, overrides?: CallOverrides): Promise<BigNumber[]>;

  'getTokens(address)'(_account: string, overrides?: CallOverrides): Promise<BigNumber[]>;

  initialize(
    _name: string,
    _symbol: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'initialize(string,string)'(
    _name: string,
    _symbol: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isApprovedForAll(owner: string, operator: string, overrides?: CallOverrides): Promise<boolean>;

  'isApprovedForAll(address,address)'(owner: string, operator: string, overrides?: CallOverrides): Promise<boolean>;

  maxTotalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  'maxTotalSupply()'(overrides?: CallOverrides): Promise<BigNumber>;

  mint(
    _sn: BytesLike,
    _expired: BigNumberish,
    _signature: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'mint(bytes32,uint256,bytes)'(
    _sn: BytesLike,
    _expired: BigNumberish,
    _signature: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mintTo(
    _to: string,
    _sn: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'mintTo(address,bytes32)'(
    _to: string,
    _sn: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  'name()'(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  'owner()'(overrides?: CallOverrides): Promise<string>;

  ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  'ownerOf(uint256)'(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  records(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

  'records(bytes32)'(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

  'safeTransferFrom(address,address,uint256)'(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'safeTransferFrom(address,address,uint256,bytes)'(
    from: string,
    to: string,
    tokenId: BigNumberish,
    _data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setApprovalForAll(
    operator: string,
    approved: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'setApprovalForAll(address,bool)'(
    operator: string,
    approved: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setClaimLimit(
    _value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'setClaimLimit(uint256)'(
    _value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMaxTotalSupply(
    _value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'setMaxTotalSupply(uint256)'(
    _value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setSigner(_user: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  'setSigner(address)'(
    _user: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setSignerContract(
    _signer: string,
    _hash: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'setSignerContract(address,bytes32)'(
    _signer: string,
    _hash: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setURI(
    _base_uri: string,
    _suffix: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'setURI(string,string)'(
    _base_uri: string,
    _suffix: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setupConfig(
    _config: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'setupConfig(address)'(
    _config: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(interfaceId: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  'supportsInterface(bytes4)'(interfaceId: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  symbol(overrides?: CallOverrides): Promise<string>;

  'symbol()'(overrides?: CallOverrides): Promise<string>;

  tokenByIndex(index: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  'tokenByIndex(uint256)'(index: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  tokenOfOwnerByIndex(owner: string, index: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  'tokenOfOwnerByIndex(address,uint256)'(
    owner: string,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  tokenURI(_tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  'tokenURI(uint256)'(_tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  'totalSupply()'(overrides?: CallOverrides): Promise<BigNumber>;

  transferFrom(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'transferFrom(address,address,uint256)'(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  verifyMessage(_messageHash: BytesLike, _signature: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  'verifyMessage(bytes32,bytes)'(
    _messageHash: BytesLike,
    _signature: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    admin(overrides?: CallOverrides): Promise<string>;

    'admin()'(overrides?: CallOverrides): Promise<string>;

    approve(to: string, tokenId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    'approve(address,uint256)'(to: string, tokenId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    'balanceOf(address)'(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    changeNameAndSymbol(_name: string, _symbol: string, overrides?: CallOverrides): Promise<void>;

    'changeNameAndSymbol(string,string)'(_name: string, _symbol: string, overrides?: CallOverrides): Promise<void>;

    changeOwner(_user: string, overrides?: CallOverrides): Promise<void>;

    'changeOwner(address)'(_user: string, overrides?: CallOverrides): Promise<void>;

    claimCount(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    'claimCount(address)'(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    claimLimit(overrides?: CallOverrides): Promise<BigNumber>;

    'claimLimit()'(overrides?: CallOverrides): Promise<BigNumber>;

    config(overrides?: CallOverrides): Promise<string>;

    'config()'(overrides?: CallOverrides): Promise<string>;

    dev(overrides?: CallOverrides): Promise<string>;

    'dev()'(overrides?: CallOverrides): Promise<string>;

    exists(_tokenId: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    'exists(uint256)'(_tokenId: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    getApproved(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    'getApproved(uint256)'(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    getTokens(_account: string, overrides?: CallOverrides): Promise<BigNumber[]>;

    'getTokens(address)'(_account: string, overrides?: CallOverrides): Promise<BigNumber[]>;

    initialize(_name: string, _symbol: string, overrides?: CallOverrides): Promise<void>;

    'initialize(string,string)'(_name: string, _symbol: string, overrides?: CallOverrides): Promise<void>;

    isApprovedForAll(owner: string, operator: string, overrides?: CallOverrides): Promise<boolean>;

    'isApprovedForAll(address,address)'(owner: string, operator: string, overrides?: CallOverrides): Promise<boolean>;

    maxTotalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    'maxTotalSupply()'(overrides?: CallOverrides): Promise<BigNumber>;

    mint(_sn: BytesLike, _expired: BigNumberish, _signature: BytesLike, overrides?: CallOverrides): Promise<void>;

    'mint(bytes32,uint256,bytes)'(
      _sn: BytesLike,
      _expired: BigNumberish,
      _signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    mintTo(_to: string, _sn: BytesLike, overrides?: CallOverrides): Promise<void>;

    'mintTo(address,bytes32)'(_to: string, _sn: BytesLike, overrides?: CallOverrides): Promise<void>;

    name(overrides?: CallOverrides): Promise<string>;

    'name()'(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    'owner()'(overrides?: CallOverrides): Promise<string>;

    ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    'ownerOf(uint256)'(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    records(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    'records(bytes32)'(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    'safeTransferFrom(address,address,uint256)'(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    'safeTransferFrom(address,address,uint256,bytes)'(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setApprovalForAll(operator: string, approved: boolean, overrides?: CallOverrides): Promise<void>;

    'setApprovalForAll(address,bool)'(operator: string, approved: boolean, overrides?: CallOverrides): Promise<void>;

    setClaimLimit(_value: BigNumberish, overrides?: CallOverrides): Promise<void>;

    'setClaimLimit(uint256)'(_value: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setMaxTotalSupply(_value: BigNumberish, overrides?: CallOverrides): Promise<void>;

    'setMaxTotalSupply(uint256)'(_value: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setSigner(_user: string, overrides?: CallOverrides): Promise<void>;

    'setSigner(address)'(_user: string, overrides?: CallOverrides): Promise<void>;

    setSignerContract(_signer: string, _hash: BytesLike, overrides?: CallOverrides): Promise<void>;

    'setSignerContract(address,bytes32)'(_signer: string, _hash: BytesLike, overrides?: CallOverrides): Promise<void>;

    setURI(_base_uri: string, _suffix: string, overrides?: CallOverrides): Promise<void>;

    'setURI(string,string)'(_base_uri: string, _suffix: string, overrides?: CallOverrides): Promise<void>;

    setupConfig(_config: string, overrides?: CallOverrides): Promise<void>;

    'setupConfig(address)'(_config: string, overrides?: CallOverrides): Promise<void>;

    signer(overrides?: CallOverrides): Promise<string>;

    'signer()'(overrides?: CallOverrides): Promise<string>;

    supportsInterface(interfaceId: BytesLike, overrides?: CallOverrides): Promise<boolean>;

    'supportsInterface(bytes4)'(interfaceId: BytesLike, overrides?: CallOverrides): Promise<boolean>;

    symbol(overrides?: CallOverrides): Promise<string>;

    'symbol()'(overrides?: CallOverrides): Promise<string>;

    tokenByIndex(index: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    'tokenByIndex(uint256)'(index: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    tokenOfOwnerByIndex(owner: string, index: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    'tokenOfOwnerByIndex(address,uint256)'(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenURI(_tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    'tokenURI(uint256)'(_tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    'totalSupply()'(overrides?: CallOverrides): Promise<BigNumber>;

    transferFrom(from: string, to: string, tokenId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    'transferFrom(address,address,uint256)'(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    verifyMessage(_messageHash: BytesLike, _signature: BytesLike, overrides?: CallOverrides): Promise<boolean>;

    'verifyMessage(bytes32,bytes)'(
      _messageHash: BytesLike,
      _signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    Approval(
      owner: string | null,
      approved: string | null,
      tokenId: BigNumberish | null
    ): TypedEventFilter<[string, string, BigNumber], { owner: string; approved: string; tokenId: BigNumber }>;

    ApprovalForAll(
      owner: string | null,
      operator: string | null,
      approved: null
    ): TypedEventFilter<[string, string, boolean], { owner: string; operator: string; approved: boolean }>;

    ConfigChanged(
      _user: string | null,
      _old: string | null,
      _new: string | null
    ): TypedEventFilter<[string, string, string], { _user: string; _old: string; _new: string }>;

    MintLog(
      _user: string | null,
      _tokenId: BigNumberish | null,
      _sn: BytesLike | null
    ): TypedEventFilter<[string, BigNumber, string], { _user: string; _tokenId: BigNumber; _sn: string }>;

    OwnerChanged(
      _user: string | null,
      _old: string | null,
      _new: string | null
    ): TypedEventFilter<[string, string, string], { _user: string; _old: string; _new: string }>;

    Transfer(
      from: string | null,
      to: string | null,
      tokenId: BigNumberish | null
    ): TypedEventFilter<[string, string, BigNumber], { from: string; to: string; tokenId: BigNumber }>;
  };

  estimateGas: {
    admin(overrides?: CallOverrides): Promise<BigNumber>;

    'admin()'(overrides?: CallOverrides): Promise<BigNumber>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    'approve(address,uint256)'(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    'balanceOf(address)'(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    changeNameAndSymbol(
      _name: string,
      _symbol: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    'changeNameAndSymbol(string,string)'(
      _name: string,
      _symbol: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    changeOwner(_user: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    'changeOwner(address)'(
      _user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimCount(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    'claimCount(address)'(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    claimLimit(overrides?: CallOverrides): Promise<BigNumber>;

    'claimLimit()'(overrides?: CallOverrides): Promise<BigNumber>;

    config(overrides?: CallOverrides): Promise<BigNumber>;

    'config()'(overrides?: CallOverrides): Promise<BigNumber>;

    dev(overrides?: CallOverrides): Promise<BigNumber>;

    'dev()'(overrides?: CallOverrides): Promise<BigNumber>;

    exists(_tokenId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    'exists(uint256)'(_tokenId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    getApproved(tokenId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    'getApproved(uint256)'(tokenId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    getTokens(_account: string, overrides?: CallOverrides): Promise<BigNumber>;

    'getTokens(address)'(_account: string, overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _name: string,
      _symbol: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    'initialize(string,string)'(
      _name: string,
      _symbol: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isApprovedForAll(owner: string, operator: string, overrides?: CallOverrides): Promise<BigNumber>;

    'isApprovedForAll(address,address)'(owner: string, operator: string, overrides?: CallOverrides): Promise<BigNumber>;

    maxTotalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    'maxTotalSupply()'(overrides?: CallOverrides): Promise<BigNumber>;

    mint(
      _sn: BytesLike,
      _expired: BigNumberish,
      _signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    'mint(bytes32,uint256,bytes)'(
      _sn: BytesLike,
      _expired: BigNumberish,
      _signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mintTo(
      _to: string,
      _sn: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    'mintTo(address,bytes32)'(
      _to: string,
      _sn: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    'name()'(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    'owner()'(overrides?: CallOverrides): Promise<BigNumber>;

    ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    'ownerOf(uint256)'(tokenId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    records(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    'records(bytes32)'(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    'safeTransferFrom(address,address,uint256)'(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    'safeTransferFrom(address,address,uint256,bytes)'(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    'setApprovalForAll(address,bool)'(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setClaimLimit(
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    'setClaimLimit(uint256)'(
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMaxTotalSupply(
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    'setMaxTotalSupply(uint256)'(
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setSigner(_user: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    'setSigner(address)'(
      _user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setSignerContract(
      _signer: string,
      _hash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    'setSignerContract(address,bytes32)'(
      _signer: string,
      _hash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setURI(
      _base_uri: string,
      _suffix: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    'setURI(string,string)'(
      _base_uri: string,
      _suffix: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setupConfig(_config: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    'setupConfig(address)'(
      _config: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    signer(overrides?: CallOverrides): Promise<BigNumber>;

    'signer()'(overrides?: CallOverrides): Promise<BigNumber>;

    supportsInterface(interfaceId: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    'supportsInterface(bytes4)'(interfaceId: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    'symbol()'(overrides?: CallOverrides): Promise<BigNumber>;

    tokenByIndex(index: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    'tokenByIndex(uint256)'(index: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    tokenOfOwnerByIndex(owner: string, index: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    'tokenOfOwnerByIndex(address,uint256)'(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenURI(_tokenId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    'tokenURI(uint256)'(_tokenId: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    'totalSupply()'(overrides?: CallOverrides): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    'transferFrom(address,address,uint256)'(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    verifyMessage(_messageHash: BytesLike, _signature: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    'verifyMessage(bytes32,bytes)'(
      _messageHash: BytesLike,
      _signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    admin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'admin()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'approve(address,uint256)'(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'balanceOf(address)'(owner: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    changeNameAndSymbol(
      _name: string,
      _symbol: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'changeNameAndSymbol(string,string)'(
      _name: string,
      _symbol: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    changeOwner(
      _user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'changeOwner(address)'(
      _user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimCount(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'claimCount(address)'(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    claimLimit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'claimLimit()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    config(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'config()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    dev(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'dev()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    exists(_tokenId: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'exists(uint256)'(_tokenId: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getApproved(tokenId: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'getApproved(uint256)'(tokenId: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTokens(_account: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'getTokens(address)'(_account: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      _name: string,
      _symbol: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'initialize(string,string)'(
      _name: string,
      _symbol: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isApprovedForAll(owner: string, operator: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'isApprovedForAll(address,address)'(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxTotalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'maxTotalSupply()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mint(
      _sn: BytesLike,
      _expired: BigNumberish,
      _signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'mint(bytes32,uint256,bytes)'(
      _sn: BytesLike,
      _expired: BigNumberish,
      _signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mintTo(
      _to: string,
      _sn: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'mintTo(address,bytes32)'(
      _to: string,
      _sn: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'name()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'owner()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'ownerOf(uint256)'(tokenId: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    records(arg0: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'records(bytes32)'(arg0: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'safeTransferFrom(address,address,uint256)'(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'safeTransferFrom(address,address,uint256,bytes)'(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'setApprovalForAll(address,bool)'(
      operator: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setClaimLimit(
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'setClaimLimit(uint256)'(
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMaxTotalSupply(
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'setMaxTotalSupply(uint256)'(
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setSigner(
      _user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'setSigner(address)'(
      _user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setSignerContract(
      _signer: string,
      _hash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'setSignerContract(address,bytes32)'(
      _signer: string,
      _hash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setURI(
      _base_uri: string,
      _suffix: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'setURI(string,string)'(
      _base_uri: string,
      _suffix: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setupConfig(
      _config: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'setupConfig(address)'(
      _config: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    signer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'signer()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    supportsInterface(interfaceId: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'supportsInterface(bytes4)'(interfaceId: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'symbol()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenByIndex(index: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'tokenByIndex(uint256)'(index: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenOfOwnerByIndex(owner: string, index: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'tokenOfOwnerByIndex(address,uint256)'(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenURI(_tokenId: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'tokenURI(uint256)'(_tokenId: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'totalSupply()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'transferFrom(address,address,uint256)'(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    verifyMessage(
      _messageHash: BytesLike,
      _signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    'verifyMessage(bytes32,bytes)'(
      _messageHash: BytesLike,
      _signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
