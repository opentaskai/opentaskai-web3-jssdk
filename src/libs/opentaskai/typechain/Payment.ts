/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from 'ethers';
import { BytesLike } from '@ethersproject/bytes';
import { Listener, Provider } from '@ethersproject/providers';
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi';
import { TypedEventFilter, TypedEvent, TypedListener } from './commons';

interface PaymentInterface extends ethers.utils.Interface {
  functions: {
    'admin()': FunctionFragment;
    'cancel(tuple,tuple,bytes32,bytes)': FunctionFragment;
    'changeOwner(address)': FunctionFragment;
    'config()': FunctionFragment;
    'deposit(address,address,uint256)': FunctionFragment;
    'depositAndFreeze(address,address,uint256,uint256,bytes32,bytes)': FunctionFragment;
    'dev()': FunctionFragment;
    'enabled()': FunctionFragment;
    'feeTo()': FunctionFragment;
    'freeze(address,uint256,bytes32,bytes)': FunctionFragment;
    'getBalance(address)': FunctionFragment;
    'getMultiUserAssets(address[],address[])': FunctionFragment;
    'getRecords(bytes32[])': FunctionFragment;
    'getUserAssets(address,address[])': FunctionFragment;
    'initialize()': FunctionFragment;
    'nosnEnabled()': FunctionFragment;
    'owner()': FunctionFragment;
    'records(bytes32)': FunctionFragment;
    'setEnabled(bool)': FunctionFragment;
    'setFeeTo(address)': FunctionFragment;
    'setNoSnEnabled(bool)': FunctionFragment;
    'setSigner(address)': FunctionFragment;
    'setSignerContract(address,bytes32)': FunctionFragment;
    'setupConfig(address)': FunctionFragment;
    'signer()': FunctionFragment;
    'transfer(bool,tuple,bytes32,bytes)': FunctionFragment;
    'unfreeze(address,uint256,bytes32,bytes)': FunctionFragment;
    'userAccounts(address,address)': FunctionFragment;
    'verifyMessage(bytes32,bytes)': FunctionFragment;
    'withdraw(address,address,uint256)': FunctionFragment;
    'withdrawWithDetail(address,address,uint256,uint256,bytes32,bytes)': FunctionFragment;
  };

  encodeFunctionData(functionFragment: 'admin', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'cancel',
    values: [
      { user: string; token: string; amount: BigNumberish; fee: BigNumberish },
      { user: string; token: string; amount: BigNumberish; fee: BigNumberish },
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(functionFragment: 'changeOwner', values: [string]): string;
  encodeFunctionData(functionFragment: 'config', values?: undefined): string;
  encodeFunctionData(functionFragment: 'deposit', values: [string, string, BigNumberish]): string;
  encodeFunctionData(
    functionFragment: 'depositAndFreeze',
    values: [string, string, BigNumberish, BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: 'dev', values?: undefined): string;
  encodeFunctionData(functionFragment: 'enabled', values?: undefined): string;
  encodeFunctionData(functionFragment: 'feeTo', values?: undefined): string;
  encodeFunctionData(functionFragment: 'freeze', values: [string, BigNumberish, BytesLike, BytesLike]): string;
  encodeFunctionData(functionFragment: 'getBalance', values: [string]): string;
  encodeFunctionData(functionFragment: 'getMultiUserAssets', values: [string[], string[]]): string;
  encodeFunctionData(functionFragment: 'getRecords', values: [BytesLike[]]): string;
  encodeFunctionData(functionFragment: 'getUserAssets', values: [string, string[]]): string;
  encodeFunctionData(functionFragment: 'initialize', values?: undefined): string;
  encodeFunctionData(functionFragment: 'nosnEnabled', values?: undefined): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'records', values: [BytesLike]): string;
  encodeFunctionData(functionFragment: 'setEnabled', values: [boolean]): string;
  encodeFunctionData(functionFragment: 'setFeeTo', values: [string]): string;
  encodeFunctionData(functionFragment: 'setNoSnEnabled', values: [boolean]): string;
  encodeFunctionData(functionFragment: 'setSigner', values: [string]): string;
  encodeFunctionData(functionFragment: 'setSignerContract', values: [string, BytesLike]): string;
  encodeFunctionData(functionFragment: 'setupConfig', values: [string]): string;
  encodeFunctionData(functionFragment: 'signer', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'transfer',
    values: [
      boolean,
      {
        token: string;
        from: string;
        to: string;
        available: BigNumberish;
        frozen: BigNumberish;
        amount: BigNumberish;
        fee: BigNumberish;
      },
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(functionFragment: 'unfreeze', values: [string, BigNumberish, BytesLike, BytesLike]): string;
  encodeFunctionData(functionFragment: 'userAccounts', values: [string, string]): string;
  encodeFunctionData(functionFragment: 'verifyMessage', values: [BytesLike, BytesLike]): string;
  encodeFunctionData(functionFragment: 'withdraw', values: [string, string, BigNumberish]): string;
  encodeFunctionData(
    functionFragment: 'withdrawWithDetail',
    values: [string, string, BigNumberish, BigNumberish, BytesLike, BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: 'admin', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'cancel', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'changeOwner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'config', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'deposit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'depositAndFreeze', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'dev', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'enabled', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'feeTo', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'freeze', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getBalance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getMultiUserAssets', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getRecords', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getUserAssets', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'nosnEnabled', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'records', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setEnabled', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setFeeTo', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setNoSnEnabled', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setSigner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setSignerContract', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setupConfig', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'signer', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transfer', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'unfreeze', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'userAccounts', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'verifyMessage', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdraw', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdrawWithDetail', data: BytesLike): Result;

  events: {
    'CancelLog(bytes32,tuple,tuple)': EventFragment;
    'ConfigChanged(address,address,address)': EventFragment;
    'DepositDetailLog(bytes32,address,address,address,uint256,uint256)': EventFragment;
    'DepositLog(address,address,uint256,address)': EventFragment;
    'FreezeLog(bytes32,address,uint256,address)': EventFragment;
    'OwnerChanged(address,address,address)': EventFragment;
    'TransferLog(bytes32,address,address,address,uint256,uint256,uint256,uint256)': EventFragment;
    'UnfreezeLog(bytes32,address,uint256,address)': EventFragment;
    'WithdrawDetailLog(bytes32,address,address,address,uint256,uint256)': EventFragment;
    'WithdrawLog(address,address,uint256,address)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'CancelLog'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ConfigChanged'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'DepositDetailLog'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'DepositLog'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'FreezeLog'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnerChanged'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'TransferLog'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'UnfreezeLog'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'WithdrawDetailLog'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'WithdrawLog'): EventFragment;
}

export interface Payment extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: PaymentInterface;

  functions: {
    admin(overrides?: CallOverrides): Promise<[string]>;

    'admin()'(overrides?: CallOverrides): Promise<[string]>;

    cancel(
      _userA: {
        user: string;
        token: string;
        amount: BigNumberish;
        fee: BigNumberish;
      },
      _userB: {
        user: string;
        token: string;
        amount: BigNumberish;
        fee: BigNumberish;
      },
      _sn: BytesLike,
      _signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'cancel((address,address,uint256,uint256),(address,address,uint256,uint256),bytes32,bytes)'(
      _userA: {
        user: string;
        token: string;
        amount: BigNumberish;
        fee: BigNumberish;
      },
      _userB: {
        user: string;
        token: string;
        amount: BigNumberish;
        fee: BigNumberish;
      },
      _sn: BytesLike,
      _signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    changeOwner(
      _user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'changeOwner(address)'(
      _user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    config(overrides?: CallOverrides): Promise<[string]>;

    'config()'(overrides?: CallOverrides): Promise<[string]>;

    deposit(
      _to: string,
      _token: string,
      _amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'deposit(address,address,uint256)'(
      _to: string,
      _token: string,
      _amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depositAndFreeze(
      _to: string,
      _token: string,
      _available: BigNumberish,
      _frozen: BigNumberish,
      _sn: BytesLike,
      _signature: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'depositAndFreeze(address,address,uint256,uint256,bytes32,bytes)'(
      _to: string,
      _token: string,
      _available: BigNumberish,
      _frozen: BigNumberish,
      _sn: BytesLike,
      _signature: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    dev(overrides?: CallOverrides): Promise<[string]>;

    'dev()'(overrides?: CallOverrides): Promise<[string]>;

    enabled(overrides?: CallOverrides): Promise<[boolean]>;

    'enabled()'(overrides?: CallOverrides): Promise<[boolean]>;

    feeTo(overrides?: CallOverrides): Promise<[string]>;

    'feeTo()'(overrides?: CallOverrides): Promise<[string]>;

    freeze(
      _token: string,
      _amount: BigNumberish,
      _sn: BytesLike,
      _signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'freeze(address,uint256,bytes32,bytes)'(
      _token: string,
      _amount: BigNumberish,
      _sn: BytesLike,
      _signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getBalance(_token: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    'getBalance(address)'(_token: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    getMultiUserAssets(
      _users: string[],
      _tokens: string[],
      overrides?: CallOverrides
    ): Promise<
      [
        ([string, string, BigNumber, BigNumber] & {
          user: string;
          token: string;
          available: BigNumber;
          frozen: BigNumber;
        })[]
      ] & {
        result: ([string, string, BigNumber, BigNumber] & {
          user: string;
          token: string;
          available: BigNumber;
          frozen: BigNumber;
        })[];
      }
    >;

    'getMultiUserAssets(address[],address[])'(
      _users: string[],
      _tokens: string[],
      overrides?: CallOverrides
    ): Promise<
      [
        ([string, string, BigNumber, BigNumber] & {
          user: string;
          token: string;
          available: BigNumber;
          frozen: BigNumber;
        })[]
      ] & {
        result: ([string, string, BigNumber, BigNumber] & {
          user: string;
          token: string;
          available: BigNumber;
          frozen: BigNumber;
        })[];
      }
    >;

    getRecords(_sns: BytesLike[], overrides?: CallOverrides): Promise<[string[]] & { result: string[] }>;

    'getRecords(bytes32[])'(_sns: BytesLike[], overrides?: CallOverrides): Promise<[string[]] & { result: string[] }>;

    getUserAssets(
      _user: string,
      _tokens: string[],
      overrides?: CallOverrides
    ): Promise<
      [
        ([string, BigNumber, BigNumber] & {
          token: string;
          available: BigNumber;
          frozen: BigNumber;
        })[]
      ] & {
        result: ([string, BigNumber, BigNumber] & {
          token: string;
          available: BigNumber;
          frozen: BigNumber;
        })[];
      }
    >;

    'getUserAssets(address,address[])'(
      _user: string,
      _tokens: string[],
      overrides?: CallOverrides
    ): Promise<
      [
        ([string, BigNumber, BigNumber] & {
          token: string;
          available: BigNumber;
          frozen: BigNumber;
        })[]
      ] & {
        result: ([string, BigNumber, BigNumber] & {
          token: string;
          available: BigNumber;
          frozen: BigNumber;
        })[];
      }
    >;

    initialize(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    'initialize()'(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    nosnEnabled(overrides?: CallOverrides): Promise<[boolean]>;

    'nosnEnabled()'(overrides?: CallOverrides): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    'owner()'(overrides?: CallOverrides): Promise<[string]>;

    records(arg0: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    'records(bytes32)'(arg0: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    setEnabled(
      _enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'setEnabled(bool)'(
      _enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFeeTo(_user: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    'setFeeTo(address)'(
      _user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setNoSnEnabled(
      _enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'setNoSnEnabled(bool)'(
      _enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setSigner(_user: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    'setSigner(address)'(
      _user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setSignerContract(
      _signer: string,
      _hash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'setSignerContract(address,bytes32)'(
      _signer: string,
      _hash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setupConfig(
      _config: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'setupConfig(address)'(
      _config: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    signer(overrides?: CallOverrides): Promise<[string]>;

    'signer()'(overrides?: CallOverrides): Promise<[string]>;

    transfer(
      _isWithdraw: boolean,
      _deal: {
        token: string;
        from: string;
        to: string;
        available: BigNumberish;
        frozen: BigNumberish;
        amount: BigNumberish;
        fee: BigNumberish;
      },
      _sn: BytesLike,
      _signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'transfer(bool,(address,address,address,uint256,uint256,uint256,uint256),bytes32,bytes)'(
      _isWithdraw: boolean,
      _deal: {
        token: string;
        from: string;
        to: string;
        available: BigNumberish;
        frozen: BigNumberish;
        amount: BigNumberish;
        fee: BigNumberish;
      },
      _sn: BytesLike,
      _signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unfreeze(
      _token: string,
      _amount: BigNumberish,
      _sn: BytesLike,
      _signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'unfreeze(address,uint256,bytes32,bytes)'(
      _token: string,
      _amount: BigNumberish,
      _sn: BytesLike,
      _signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    userAccounts(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { available: BigNumber; frozen: BigNumber }>;

    'userAccounts(address,address)'(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { available: BigNumber; frozen: BigNumber }>;

    verifyMessage(_messageHash: BytesLike, _signature: BytesLike, overrides?: CallOverrides): Promise<[boolean]>;

    'verifyMessage(bytes32,bytes)'(
      _messageHash: BytesLike,
      _signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    withdraw(
      _to: string,
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'withdraw(address,address,uint256)'(
      _to: string,
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawWithDetail(
      _to: string,
      _token: string,
      _available: BigNumberish,
      _frozen: BigNumberish,
      _sn: BytesLike,
      _signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    'withdrawWithDetail(address,address,uint256,uint256,bytes32,bytes)'(
      _to: string,
      _token: string,
      _available: BigNumberish,
      _frozen: BigNumberish,
      _sn: BytesLike,
      _signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  admin(overrides?: CallOverrides): Promise<string>;

  'admin()'(overrides?: CallOverrides): Promise<string>;

  cancel(
    _userA: {
      user: string;
      token: string;
      amount: BigNumberish;
      fee: BigNumberish;
    },
    _userB: {
      user: string;
      token: string;
      amount: BigNumberish;
      fee: BigNumberish;
    },
    _sn: BytesLike,
    _signature: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'cancel((address,address,uint256,uint256),(address,address,uint256,uint256),bytes32,bytes)'(
    _userA: {
      user: string;
      token: string;
      amount: BigNumberish;
      fee: BigNumberish;
    },
    _userB: {
      user: string;
      token: string;
      amount: BigNumberish;
      fee: BigNumberish;
    },
    _sn: BytesLike,
    _signature: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  changeOwner(_user: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  'changeOwner(address)'(
    _user: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  config(overrides?: CallOverrides): Promise<string>;

  'config()'(overrides?: CallOverrides): Promise<string>;

  deposit(
    _to: string,
    _token: string,
    _amount: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'deposit(address,address,uint256)'(
    _to: string,
    _token: string,
    _amount: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  depositAndFreeze(
    _to: string,
    _token: string,
    _available: BigNumberish,
    _frozen: BigNumberish,
    _sn: BytesLike,
    _signature: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'depositAndFreeze(address,address,uint256,uint256,bytes32,bytes)'(
    _to: string,
    _token: string,
    _available: BigNumberish,
    _frozen: BigNumberish,
    _sn: BytesLike,
    _signature: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  dev(overrides?: CallOverrides): Promise<string>;

  'dev()'(overrides?: CallOverrides): Promise<string>;

  enabled(overrides?: CallOverrides): Promise<boolean>;

  'enabled()'(overrides?: CallOverrides): Promise<boolean>;

  feeTo(overrides?: CallOverrides): Promise<string>;

  'feeTo()'(overrides?: CallOverrides): Promise<string>;

  freeze(
    _token: string,
    _amount: BigNumberish,
    _sn: BytesLike,
    _signature: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'freeze(address,uint256,bytes32,bytes)'(
    _token: string,
    _amount: BigNumberish,
    _sn: BytesLike,
    _signature: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getBalance(_token: string, overrides?: CallOverrides): Promise<BigNumber>;

  'getBalance(address)'(_token: string, overrides?: CallOverrides): Promise<BigNumber>;

  getMultiUserAssets(
    _users: string[],
    _tokens: string[],
    overrides?: CallOverrides
  ): Promise<
    ([string, string, BigNumber, BigNumber] & {
      user: string;
      token: string;
      available: BigNumber;
      frozen: BigNumber;
    })[]
  >;

  'getMultiUserAssets(address[],address[])'(
    _users: string[],
    _tokens: string[],
    overrides?: CallOverrides
  ): Promise<
    ([string, string, BigNumber, BigNumber] & {
      user: string;
      token: string;
      available: BigNumber;
      frozen: BigNumber;
    })[]
  >;

  getRecords(_sns: BytesLike[], overrides?: CallOverrides): Promise<string[]>;

  'getRecords(bytes32[])'(_sns: BytesLike[], overrides?: CallOverrides): Promise<string[]>;

  getUserAssets(
    _user: string,
    _tokens: string[],
    overrides?: CallOverrides
  ): Promise<
    ([string, BigNumber, BigNumber] & {
      token: string;
      available: BigNumber;
      frozen: BigNumber;
    })[]
  >;

  'getUserAssets(address,address[])'(
    _user: string,
    _tokens: string[],
    overrides?: CallOverrides
  ): Promise<
    ([string, BigNumber, BigNumber] & {
      token: string;
      available: BigNumber;
      frozen: BigNumber;
    })[]
  >;

  initialize(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  'initialize()'(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  nosnEnabled(overrides?: CallOverrides): Promise<boolean>;

  'nosnEnabled()'(overrides?: CallOverrides): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  'owner()'(overrides?: CallOverrides): Promise<string>;

  records(arg0: BytesLike, overrides?: CallOverrides): Promise<string>;

  'records(bytes32)'(arg0: BytesLike, overrides?: CallOverrides): Promise<string>;

  setEnabled(
    _enabled: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'setEnabled(bool)'(
    _enabled: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFeeTo(_user: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  'setFeeTo(address)'(
    _user: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setNoSnEnabled(
    _enabled: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'setNoSnEnabled(bool)'(
    _enabled: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setSigner(_user: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  'setSigner(address)'(
    _user: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setSignerContract(
    _signer: string,
    _hash: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'setSignerContract(address,bytes32)'(
    _signer: string,
    _hash: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setupConfig(
    _config: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'setupConfig(address)'(
    _config: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transfer(
    _isWithdraw: boolean,
    _deal: {
      token: string;
      from: string;
      to: string;
      available: BigNumberish;
      frozen: BigNumberish;
      amount: BigNumberish;
      fee: BigNumberish;
    },
    _sn: BytesLike,
    _signature: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'transfer(bool,(address,address,address,uint256,uint256,uint256,uint256),bytes32,bytes)'(
    _isWithdraw: boolean,
    _deal: {
      token: string;
      from: string;
      to: string;
      available: BigNumberish;
      frozen: BigNumberish;
      amount: BigNumberish;
      fee: BigNumberish;
    },
    _sn: BytesLike,
    _signature: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unfreeze(
    _token: string,
    _amount: BigNumberish,
    _sn: BytesLike,
    _signature: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'unfreeze(address,uint256,bytes32,bytes)'(
    _token: string,
    _amount: BigNumberish,
    _sn: BytesLike,
    _signature: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  userAccounts(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { available: BigNumber; frozen: BigNumber }>;

  'userAccounts(address,address)'(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { available: BigNumber; frozen: BigNumber }>;

  verifyMessage(_messageHash: BytesLike, _signature: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  'verifyMessage(bytes32,bytes)'(
    _messageHash: BytesLike,
    _signature: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  withdraw(
    _to: string,
    _token: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'withdraw(address,address,uint256)'(
    _to: string,
    _token: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawWithDetail(
    _to: string,
    _token: string,
    _available: BigNumberish,
    _frozen: BigNumberish,
    _sn: BytesLike,
    _signature: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  'withdrawWithDetail(address,address,uint256,uint256,bytes32,bytes)'(
    _to: string,
    _token: string,
    _available: BigNumberish,
    _frozen: BigNumberish,
    _sn: BytesLike,
    _signature: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    admin(overrides?: CallOverrides): Promise<string>;

    'admin()'(overrides?: CallOverrides): Promise<string>;

    cancel(
      _userA: {
        user: string;
        token: string;
        amount: BigNumberish;
        fee: BigNumberish;
      },
      _userB: {
        user: string;
        token: string;
        amount: BigNumberish;
        fee: BigNumberish;
      },
      _sn: BytesLike,
      _signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    'cancel((address,address,uint256,uint256),(address,address,uint256,uint256),bytes32,bytes)'(
      _userA: {
        user: string;
        token: string;
        amount: BigNumberish;
        fee: BigNumberish;
      },
      _userB: {
        user: string;
        token: string;
        amount: BigNumberish;
        fee: BigNumberish;
      },
      _sn: BytesLike,
      _signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    changeOwner(_user: string, overrides?: CallOverrides): Promise<void>;

    'changeOwner(address)'(_user: string, overrides?: CallOverrides): Promise<void>;

    config(overrides?: CallOverrides): Promise<string>;

    'config()'(overrides?: CallOverrides): Promise<string>;

    deposit(_to: string, _token: string, _amount: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    'deposit(address,address,uint256)'(
      _to: string,
      _token: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    depositAndFreeze(
      _to: string,
      _token: string,
      _available: BigNumberish,
      _frozen: BigNumberish,
      _sn: BytesLike,
      _signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    'depositAndFreeze(address,address,uint256,uint256,bytes32,bytes)'(
      _to: string,
      _token: string,
      _available: BigNumberish,
      _frozen: BigNumberish,
      _sn: BytesLike,
      _signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    dev(overrides?: CallOverrides): Promise<string>;

    'dev()'(overrides?: CallOverrides): Promise<string>;

    enabled(overrides?: CallOverrides): Promise<boolean>;

    'enabled()'(overrides?: CallOverrides): Promise<boolean>;

    feeTo(overrides?: CallOverrides): Promise<string>;

    'feeTo()'(overrides?: CallOverrides): Promise<string>;

    freeze(
      _token: string,
      _amount: BigNumberish,
      _sn: BytesLike,
      _signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    'freeze(address,uint256,bytes32,bytes)'(
      _token: string,
      _amount: BigNumberish,
      _sn: BytesLike,
      _signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getBalance(_token: string, overrides?: CallOverrides): Promise<BigNumber>;

    'getBalance(address)'(_token: string, overrides?: CallOverrides): Promise<BigNumber>;

    getMultiUserAssets(
      _users: string[],
      _tokens: string[],
      overrides?: CallOverrides
    ): Promise<
      ([string, string, BigNumber, BigNumber] & {
        user: string;
        token: string;
        available: BigNumber;
        frozen: BigNumber;
      })[]
    >;

    'getMultiUserAssets(address[],address[])'(
      _users: string[],
      _tokens: string[],
      overrides?: CallOverrides
    ): Promise<
      ([string, string, BigNumber, BigNumber] & {
        user: string;
        token: string;
        available: BigNumber;
        frozen: BigNumber;
      })[]
    >;

    getRecords(_sns: BytesLike[], overrides?: CallOverrides): Promise<string[]>;

    'getRecords(bytes32[])'(_sns: BytesLike[], overrides?: CallOverrides): Promise<string[]>;

    getUserAssets(
      _user: string,
      _tokens: string[],
      overrides?: CallOverrides
    ): Promise<
      ([string, BigNumber, BigNumber] & {
        token: string;
        available: BigNumber;
        frozen: BigNumber;
      })[]
    >;

    'getUserAssets(address,address[])'(
      _user: string,
      _tokens: string[],
      overrides?: CallOverrides
    ): Promise<
      ([string, BigNumber, BigNumber] & {
        token: string;
        available: BigNumber;
        frozen: BigNumber;
      })[]
    >;

    initialize(overrides?: CallOverrides): Promise<void>;

    'initialize()'(overrides?: CallOverrides): Promise<void>;

    nosnEnabled(overrides?: CallOverrides): Promise<boolean>;

    'nosnEnabled()'(overrides?: CallOverrides): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    'owner()'(overrides?: CallOverrides): Promise<string>;

    records(arg0: BytesLike, overrides?: CallOverrides): Promise<string>;

    'records(bytes32)'(arg0: BytesLike, overrides?: CallOverrides): Promise<string>;

    setEnabled(_enabled: boolean, overrides?: CallOverrides): Promise<void>;

    'setEnabled(bool)'(_enabled: boolean, overrides?: CallOverrides): Promise<void>;

    setFeeTo(_user: string, overrides?: CallOverrides): Promise<void>;

    'setFeeTo(address)'(_user: string, overrides?: CallOverrides): Promise<void>;

    setNoSnEnabled(_enabled: boolean, overrides?: CallOverrides): Promise<void>;

    'setNoSnEnabled(bool)'(_enabled: boolean, overrides?: CallOverrides): Promise<void>;

    setSigner(_user: string, overrides?: CallOverrides): Promise<void>;

    'setSigner(address)'(_user: string, overrides?: CallOverrides): Promise<void>;

    setSignerContract(_signer: string, _hash: BytesLike, overrides?: CallOverrides): Promise<void>;

    'setSignerContract(address,bytes32)'(_signer: string, _hash: BytesLike, overrides?: CallOverrides): Promise<void>;

    setupConfig(_config: string, overrides?: CallOverrides): Promise<void>;

    'setupConfig(address)'(_config: string, overrides?: CallOverrides): Promise<void>;

    signer(overrides?: CallOverrides): Promise<string>;

    'signer()'(overrides?: CallOverrides): Promise<string>;

    transfer(
      _isWithdraw: boolean,
      _deal: {
        token: string;
        from: string;
        to: string;
        available: BigNumberish;
        frozen: BigNumberish;
        amount: BigNumberish;
        fee: BigNumberish;
      },
      _sn: BytesLike,
      _signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    'transfer(bool,(address,address,address,uint256,uint256,uint256,uint256),bytes32,bytes)'(
      _isWithdraw: boolean,
      _deal: {
        token: string;
        from: string;
        to: string;
        available: BigNumberish;
        frozen: BigNumberish;
        amount: BigNumberish;
        fee: BigNumberish;
      },
      _sn: BytesLike,
      _signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    unfreeze(
      _token: string,
      _amount: BigNumberish,
      _sn: BytesLike,
      _signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    'unfreeze(address,uint256,bytes32,bytes)'(
      _token: string,
      _amount: BigNumberish,
      _sn: BytesLike,
      _signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    userAccounts(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { available: BigNumber; frozen: BigNumber }>;

    'userAccounts(address,address)'(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { available: BigNumber; frozen: BigNumber }>;

    verifyMessage(_messageHash: BytesLike, _signature: BytesLike, overrides?: CallOverrides): Promise<boolean>;

    'verifyMessage(bytes32,bytes)'(
      _messageHash: BytesLike,
      _signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    withdraw(_to: string, _token: string, _amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    'withdraw(address,address,uint256)'(
      _to: string,
      _token: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawWithDetail(
      _to: string,
      _token: string,
      _available: BigNumberish,
      _frozen: BigNumberish,
      _sn: BytesLike,
      _signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    'withdrawWithDetail(address,address,uint256,uint256,bytes32,bytes)'(
      _to: string,
      _token: string,
      _available: BigNumberish,
      _frozen: BigNumberish,
      _sn: BytesLike,
      _signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    CancelLog(
      _sn: BytesLike | null,
      _userA: null,
      _userB: null
    ): TypedEventFilter<
      [
        string,
        [string, string, BigNumber, BigNumber] & {
          user: string;
          token: string;
          amount: BigNumber;
          fee: BigNumber;
        },
        [string, string, BigNumber, BigNumber] & {
          user: string;
          token: string;
          amount: BigNumber;
          fee: BigNumber;
        }
      ],
      {
        _sn: string;
        _userA: [string, string, BigNumber, BigNumber] & {
          user: string;
          token: string;
          amount: BigNumber;
          fee: BigNumber;
        };
        _userB: [string, string, BigNumber, BigNumber] & {
          user: string;
          token: string;
          amount: BigNumber;
          fee: BigNumber;
        };
      }
    >;

    ConfigChanged(
      _user: string | null,
      _old: string | null,
      _new: string | null
    ): TypedEventFilter<[string, string, string], { _user: string; _old: string; _new: string }>;

    DepositDetailLog(
      _sn: BytesLike | null,
      _token: string | null,
      _from: null,
      _to: null,
      _available: null,
      _frozen: null
    ): TypedEventFilter<
      [string, string, string, string, BigNumber, BigNumber],
      {
        _sn: string;
        _token: string;
        _from: string;
        _to: string;
        _available: BigNumber;
        _frozen: BigNumber;
      }
    >;

    DepositLog(
      _user: string | null,
      _token: string | null,
      _amount: BigNumberish | null,
      _from: null
    ): TypedEventFilter<
      [string, string, BigNumber, string],
      { _user: string; _token: string; _amount: BigNumber; _from: string }
    >;

    FreezeLog(
      _sn: BytesLike | null,
      _token: string | null,
      _amount: null,
      _user: null
    ): TypedEventFilter<
      [string, string, BigNumber, string],
      { _sn: string; _token: string; _amount: BigNumber; _user: string }
    >;

    OwnerChanged(
      _user: string | null,
      _old: string | null,
      _new: string | null
    ): TypedEventFilter<[string, string, string], { _user: string; _old: string; _new: string }>;

    TransferLog(
      _sn: BytesLike | null,
      _token: string | null,
      _from: null,
      _to: null,
      _available: null,
      _frozen: null,
      _amount: null,
      _fee: null
    ): TypedEventFilter<
      [string, string, string, string, BigNumber, BigNumber, BigNumber, BigNumber],
      {
        _sn: string;
        _token: string;
        _from: string;
        _to: string;
        _available: BigNumber;
        _frozen: BigNumber;
        _amount: BigNumber;
        _fee: BigNumber;
      }
    >;

    UnfreezeLog(
      _sn: BytesLike | null,
      _token: string | null,
      _amount: null,
      _user: null
    ): TypedEventFilter<
      [string, string, BigNumber, string],
      { _sn: string; _token: string; _amount: BigNumber; _user: string }
    >;

    WithdrawDetailLog(
      _sn: BytesLike | null,
      _token: string | null,
      _from: null,
      _to: null,
      _available: null,
      _frozen: null
    ): TypedEventFilter<
      [string, string, string, string, BigNumber, BigNumber],
      {
        _sn: string;
        _token: string;
        _from: string;
        _to: string;
        _available: BigNumber;
        _frozen: BigNumber;
      }
    >;

    WithdrawLog(
      _user: string | null,
      _token: string | null,
      _amount: BigNumberish | null,
      _from: null
    ): TypedEventFilter<
      [string, string, BigNumber, string],
      { _user: string; _token: string; _amount: BigNumber; _from: string }
    >;
  };

  estimateGas: {
    admin(overrides?: CallOverrides): Promise<BigNumber>;

    'admin()'(overrides?: CallOverrides): Promise<BigNumber>;

    cancel(
      _userA: {
        user: string;
        token: string;
        amount: BigNumberish;
        fee: BigNumberish;
      },
      _userB: {
        user: string;
        token: string;
        amount: BigNumberish;
        fee: BigNumberish;
      },
      _sn: BytesLike,
      _signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    'cancel((address,address,uint256,uint256),(address,address,uint256,uint256),bytes32,bytes)'(
      _userA: {
        user: string;
        token: string;
        amount: BigNumberish;
        fee: BigNumberish;
      },
      _userB: {
        user: string;
        token: string;
        amount: BigNumberish;
        fee: BigNumberish;
      },
      _sn: BytesLike,
      _signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    changeOwner(_user: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    'changeOwner(address)'(
      _user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    config(overrides?: CallOverrides): Promise<BigNumber>;

    'config()'(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      _to: string,
      _token: string,
      _amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    'deposit(address,address,uint256)'(
      _to: string,
      _token: string,
      _amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    depositAndFreeze(
      _to: string,
      _token: string,
      _available: BigNumberish,
      _frozen: BigNumberish,
      _sn: BytesLike,
      _signature: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    'depositAndFreeze(address,address,uint256,uint256,bytes32,bytes)'(
      _to: string,
      _token: string,
      _available: BigNumberish,
      _frozen: BigNumberish,
      _sn: BytesLike,
      _signature: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    dev(overrides?: CallOverrides): Promise<BigNumber>;

    'dev()'(overrides?: CallOverrides): Promise<BigNumber>;

    enabled(overrides?: CallOverrides): Promise<BigNumber>;

    'enabled()'(overrides?: CallOverrides): Promise<BigNumber>;

    feeTo(overrides?: CallOverrides): Promise<BigNumber>;

    'feeTo()'(overrides?: CallOverrides): Promise<BigNumber>;

    freeze(
      _token: string,
      _amount: BigNumberish,
      _sn: BytesLike,
      _signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    'freeze(address,uint256,bytes32,bytes)'(
      _token: string,
      _amount: BigNumberish,
      _sn: BytesLike,
      _signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getBalance(_token: string, overrides?: CallOverrides): Promise<BigNumber>;

    'getBalance(address)'(_token: string, overrides?: CallOverrides): Promise<BigNumber>;

    getMultiUserAssets(_users: string[], _tokens: string[], overrides?: CallOverrides): Promise<BigNumber>;

    'getMultiUserAssets(address[],address[])'(
      _users: string[],
      _tokens: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRecords(_sns: BytesLike[], overrides?: CallOverrides): Promise<BigNumber>;

    'getRecords(bytes32[])'(_sns: BytesLike[], overrides?: CallOverrides): Promise<BigNumber>;

    getUserAssets(_user: string, _tokens: string[], overrides?: CallOverrides): Promise<BigNumber>;

    'getUserAssets(address,address[])'(_user: string, _tokens: string[], overrides?: CallOverrides): Promise<BigNumber>;

    initialize(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    'initialize()'(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    nosnEnabled(overrides?: CallOverrides): Promise<BigNumber>;

    'nosnEnabled()'(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    'owner()'(overrides?: CallOverrides): Promise<BigNumber>;

    records(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    'records(bytes32)'(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    setEnabled(_enabled: boolean, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    'setEnabled(bool)'(
      _enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFeeTo(_user: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    'setFeeTo(address)'(_user: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    setNoSnEnabled(_enabled: boolean, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    'setNoSnEnabled(bool)'(
      _enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setSigner(_user: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    'setSigner(address)'(
      _user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setSignerContract(
      _signer: string,
      _hash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    'setSignerContract(address,bytes32)'(
      _signer: string,
      _hash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setupConfig(_config: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    'setupConfig(address)'(
      _config: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    signer(overrides?: CallOverrides): Promise<BigNumber>;

    'signer()'(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      _isWithdraw: boolean,
      _deal: {
        token: string;
        from: string;
        to: string;
        available: BigNumberish;
        frozen: BigNumberish;
        amount: BigNumberish;
        fee: BigNumberish;
      },
      _sn: BytesLike,
      _signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    'transfer(bool,(address,address,address,uint256,uint256,uint256,uint256),bytes32,bytes)'(
      _isWithdraw: boolean,
      _deal: {
        token: string;
        from: string;
        to: string;
        available: BigNumberish;
        frozen: BigNumberish;
        amount: BigNumberish;
        fee: BigNumberish;
      },
      _sn: BytesLike,
      _signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unfreeze(
      _token: string,
      _amount: BigNumberish,
      _sn: BytesLike,
      _signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    'unfreeze(address,uint256,bytes32,bytes)'(
      _token: string,
      _amount: BigNumberish,
      _sn: BytesLike,
      _signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    userAccounts(arg0: string, arg1: string, overrides?: CallOverrides): Promise<BigNumber>;

    'userAccounts(address,address)'(arg0: string, arg1: string, overrides?: CallOverrides): Promise<BigNumber>;

    verifyMessage(_messageHash: BytesLike, _signature: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    'verifyMessage(bytes32,bytes)'(
      _messageHash: BytesLike,
      _signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(
      _to: string,
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    'withdraw(address,address,uint256)'(
      _to: string,
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawWithDetail(
      _to: string,
      _token: string,
      _available: BigNumberish,
      _frozen: BigNumberish,
      _sn: BytesLike,
      _signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    'withdrawWithDetail(address,address,uint256,uint256,bytes32,bytes)'(
      _to: string,
      _token: string,
      _available: BigNumberish,
      _frozen: BigNumberish,
      _sn: BytesLike,
      _signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    admin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'admin()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    cancel(
      _userA: {
        user: string;
        token: string;
        amount: BigNumberish;
        fee: BigNumberish;
      },
      _userB: {
        user: string;
        token: string;
        amount: BigNumberish;
        fee: BigNumberish;
      },
      _sn: BytesLike,
      _signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'cancel((address,address,uint256,uint256),(address,address,uint256,uint256),bytes32,bytes)'(
      _userA: {
        user: string;
        token: string;
        amount: BigNumberish;
        fee: BigNumberish;
      },
      _userB: {
        user: string;
        token: string;
        amount: BigNumberish;
        fee: BigNumberish;
      },
      _sn: BytesLike,
      _signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    changeOwner(
      _user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'changeOwner(address)'(
      _user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    config(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'config()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deposit(
      _to: string,
      _token: string,
      _amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'deposit(address,address,uint256)'(
      _to: string,
      _token: string,
      _amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    depositAndFreeze(
      _to: string,
      _token: string,
      _available: BigNumberish,
      _frozen: BigNumberish,
      _sn: BytesLike,
      _signature: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'depositAndFreeze(address,address,uint256,uint256,bytes32,bytes)'(
      _to: string,
      _token: string,
      _available: BigNumberish,
      _frozen: BigNumberish,
      _sn: BytesLike,
      _signature: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    dev(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'dev()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    enabled(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'enabled()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feeTo(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'feeTo()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    freeze(
      _token: string,
      _amount: BigNumberish,
      _sn: BytesLike,
      _signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'freeze(address,uint256,bytes32,bytes)'(
      _token: string,
      _amount: BigNumberish,
      _sn: BytesLike,
      _signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getBalance(_token: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'getBalance(address)'(_token: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMultiUserAssets(_users: string[], _tokens: string[], overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'getMultiUserAssets(address[],address[])'(
      _users: string[],
      _tokens: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRecords(_sns: BytesLike[], overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'getRecords(bytes32[])'(_sns: BytesLike[], overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getUserAssets(_user: string, _tokens: string[], overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'getUserAssets(address,address[])'(
      _user: string,
      _tokens: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    'initialize()'(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    nosnEnabled(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'nosnEnabled()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'owner()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    records(arg0: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'records(bytes32)'(arg0: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setEnabled(
      _enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'setEnabled(bool)'(
      _enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFeeTo(_user: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    'setFeeTo(address)'(
      _user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setNoSnEnabled(
      _enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'setNoSnEnabled(bool)'(
      _enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setSigner(
      _user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'setSigner(address)'(
      _user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setSignerContract(
      _signer: string,
      _hash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'setSignerContract(address,bytes32)'(
      _signer: string,
      _hash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setupConfig(
      _config: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'setupConfig(address)'(
      _config: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    signer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'signer()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      _isWithdraw: boolean,
      _deal: {
        token: string;
        from: string;
        to: string;
        available: BigNumberish;
        frozen: BigNumberish;
        amount: BigNumberish;
        fee: BigNumberish;
      },
      _sn: BytesLike,
      _signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'transfer(bool,(address,address,address,uint256,uint256,uint256,uint256),bytes32,bytes)'(
      _isWithdraw: boolean,
      _deal: {
        token: string;
        from: string;
        to: string;
        available: BigNumberish;
        frozen: BigNumberish;
        amount: BigNumberish;
        fee: BigNumberish;
      },
      _sn: BytesLike,
      _signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unfreeze(
      _token: string,
      _amount: BigNumberish,
      _sn: BytesLike,
      _signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'unfreeze(address,uint256,bytes32,bytes)'(
      _token: string,
      _amount: BigNumberish,
      _sn: BytesLike,
      _signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    userAccounts(arg0: string, arg1: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    'userAccounts(address,address)'(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    verifyMessage(
      _messageHash: BytesLike,
      _signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    'verifyMessage(bytes32,bytes)'(
      _messageHash: BytesLike,
      _signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      _to: string,
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'withdraw(address,address,uint256)'(
      _to: string,
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawWithDetail(
      _to: string,
      _token: string,
      _available: BigNumberish,
      _frozen: BigNumberish,
      _sn: BytesLike,
      _signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    'withdrawWithDetail(address,address,uint256,uint256,bytes32,bytes)'(
      _to: string,
      _token: string,
      _available: BigNumberish,
      _frozen: BigNumberish,
      _sn: BytesLike,
      _signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
