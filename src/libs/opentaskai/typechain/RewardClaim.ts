/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface RewardClaimInterface extends ethers.utils.Interface {
  functions: {
    "admin()": FunctionFragment;
    "changeOwner(address)": FunctionFragment;
    "checkPeriodMerkleRoot(uint256,uint256)": FunctionFragment;
    "claimReward(uint256,uint256,uint256,bytes32[])": FunctionFragment;
    "config()": FunctionFragment;
    "dev()": FunctionFragment;
    "enabled()": FunctionFragment;
    "getBalance(address)": FunctionFragment;
    "getPeriodInfo(uint256)": FunctionFragment;
    "hasClaimed(uint256,address)": FunctionFragment;
    "initialize()": FunctionFragment;
    "owner()": FunctionFragment;
    "setEnabled(bool)": FunctionFragment;
    "setPeriod(uint256,uint256,address,bytes32)": FunctionFragment;
    "setupConfig(address)": FunctionFragment;
    "withdraw(address,address,uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(functionFragment: "changeOwner", values: [string]): string;
  encodeFunctionData(
    functionFragment: "checkPeriodMerkleRoot",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimReward",
    values: [BigNumberish, BigNumberish, BigNumberish, BytesLike[]]
  ): string;
  encodeFunctionData(functionFragment: "config", values?: undefined): string;
  encodeFunctionData(functionFragment: "dev", values?: undefined): string;
  encodeFunctionData(functionFragment: "enabled", values?: undefined): string;
  encodeFunctionData(functionFragment: "getBalance", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getPeriodInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "hasClaimed",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "setEnabled", values: [boolean]): string;
  encodeFunctionData(
    functionFragment: "setPeriod",
    values: [BigNumberish, BigNumberish, string, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "setupConfig", values: [string]): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [string, string, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "changeOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkPeriodMerkleRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "config", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "dev", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "enabled", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getBalance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPeriodInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasClaimed", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setEnabled", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setPeriod", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setupConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "ConfigChanged(address,address,address)": EventFragment;
    "OwnerChanged(address,address,address)": EventFragment;
    "RewardClaimed(address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ConfigChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnerChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardClaimed"): EventFragment;
}

export interface RewardClaim extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: RewardClaimInterface;

  functions: {
    admin(overrides?: CallOverrides): Promise<[string]>;

    "admin()"(overrides?: CallOverrides): Promise<[string]>;

    changeOwner(
      _user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "changeOwner(address)"(
      _user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    checkPeriodMerkleRoot(
      _periodNumber: BigNumberish,
      _groupId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "checkPeriodMerkleRoot(uint256,uint256)"(
      _periodNumber: BigNumberish,
      _groupId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    claimReward(
      _periodNumber: BigNumberish,
      _groupId: BigNumberish,
      _amount: BigNumberish,
      _proof: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "claimReward(uint256,uint256,uint256,bytes32[])"(
      _periodNumber: BigNumberish,
      _groupId: BigNumberish,
      _amount: BigNumberish,
      _proof: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    config(overrides?: CallOverrides): Promise<[string]>;

    "config()"(overrides?: CallOverrides): Promise<[string]>;

    dev(overrides?: CallOverrides): Promise<[string]>;

    "dev()"(overrides?: CallOverrides): Promise<[string]>;

    enabled(overrides?: CallOverrides): Promise<[boolean]>;

    "enabled()"(overrides?: CallOverrides): Promise<[boolean]>;

    getBalance(_token: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    "getBalance(address)"(
      _token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPeriodInfo(
      _periodNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [string, BigNumber, BigNumber] & {
          token: string;
          userCount: BigNumber;
          totalAmount: BigNumber;
        }
      ]
    >;

    "getPeriodInfo(uint256)"(
      _periodNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [string, BigNumber, BigNumber] & {
          token: string;
          userCount: BigNumber;
          totalAmount: BigNumber;
        }
      ]
    >;

    hasClaimed(
      _periodNumber: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "hasClaimed(uint256,address)"(
      _periodNumber: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    initialize(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "initialize()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    setEnabled(
      _enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setEnabled(bool)"(
      _enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPeriod(
      _periodNumber: BigNumberish,
      _groupId: BigNumberish,
      _token: string,
      _merkleRoot: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setPeriod(uint256,uint256,address,bytes32)"(
      _periodNumber: BigNumberish,
      _groupId: BigNumberish,
      _token: string,
      _merkleRoot: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setupConfig(
      _config: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setupConfig(address)"(
      _config: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      _to: string,
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "withdraw(address,address,uint256)"(
      _to: string,
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  admin(overrides?: CallOverrides): Promise<string>;

  "admin()"(overrides?: CallOverrides): Promise<string>;

  changeOwner(
    _user: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "changeOwner(address)"(
    _user: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  checkPeriodMerkleRoot(
    _periodNumber: BigNumberish,
    _groupId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "checkPeriodMerkleRoot(uint256,uint256)"(
    _periodNumber: BigNumberish,
    _groupId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  claimReward(
    _periodNumber: BigNumberish,
    _groupId: BigNumberish,
    _amount: BigNumberish,
    _proof: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "claimReward(uint256,uint256,uint256,bytes32[])"(
    _periodNumber: BigNumberish,
    _groupId: BigNumberish,
    _amount: BigNumberish,
    _proof: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  config(overrides?: CallOverrides): Promise<string>;

  "config()"(overrides?: CallOverrides): Promise<string>;

  dev(overrides?: CallOverrides): Promise<string>;

  "dev()"(overrides?: CallOverrides): Promise<string>;

  enabled(overrides?: CallOverrides): Promise<boolean>;

  "enabled()"(overrides?: CallOverrides): Promise<boolean>;

  getBalance(_token: string, overrides?: CallOverrides): Promise<BigNumber>;

  "getBalance(address)"(
    _token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPeriodInfo(
    _periodNumber: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber] & {
      token: string;
      userCount: BigNumber;
      totalAmount: BigNumber;
    }
  >;

  "getPeriodInfo(uint256)"(
    _periodNumber: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber] & {
      token: string;
      userCount: BigNumber;
      totalAmount: BigNumber;
    }
  >;

  hasClaimed(
    _periodNumber: BigNumberish,
    _user: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "hasClaimed(uint256,address)"(
    _periodNumber: BigNumberish,
    _user: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  initialize(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "initialize()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  setEnabled(
    _enabled: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setEnabled(bool)"(
    _enabled: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPeriod(
    _periodNumber: BigNumberish,
    _groupId: BigNumberish,
    _token: string,
    _merkleRoot: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setPeriod(uint256,uint256,address,bytes32)"(
    _periodNumber: BigNumberish,
    _groupId: BigNumberish,
    _token: string,
    _merkleRoot: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setupConfig(
    _config: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setupConfig(address)"(
    _config: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    _to: string,
    _token: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "withdraw(address,address,uint256)"(
    _to: string,
    _token: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    admin(overrides?: CallOverrides): Promise<string>;

    "admin()"(overrides?: CallOverrides): Promise<string>;

    changeOwner(_user: string, overrides?: CallOverrides): Promise<void>;

    "changeOwner(address)"(
      _user: string,
      overrides?: CallOverrides
    ): Promise<void>;

    checkPeriodMerkleRoot(
      _periodNumber: BigNumberish,
      _groupId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "checkPeriodMerkleRoot(uint256,uint256)"(
      _periodNumber: BigNumberish,
      _groupId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    claimReward(
      _periodNumber: BigNumberish,
      _groupId: BigNumberish,
      _amount: BigNumberish,
      _proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    "claimReward(uint256,uint256,uint256,bytes32[])"(
      _periodNumber: BigNumberish,
      _groupId: BigNumberish,
      _amount: BigNumberish,
      _proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    config(overrides?: CallOverrides): Promise<string>;

    "config()"(overrides?: CallOverrides): Promise<string>;

    dev(overrides?: CallOverrides): Promise<string>;

    "dev()"(overrides?: CallOverrides): Promise<string>;

    enabled(overrides?: CallOverrides): Promise<boolean>;

    "enabled()"(overrides?: CallOverrides): Promise<boolean>;

    getBalance(_token: string, overrides?: CallOverrides): Promise<BigNumber>;

    "getBalance(address)"(
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPeriodInfo(
      _periodNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber] & {
        token: string;
        userCount: BigNumber;
        totalAmount: BigNumber;
      }
    >;

    "getPeriodInfo(uint256)"(
      _periodNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber] & {
        token: string;
        userCount: BigNumber;
        totalAmount: BigNumber;
      }
    >;

    hasClaimed(
      _periodNumber: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "hasClaimed(uint256,address)"(
      _periodNumber: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initialize(overrides?: CallOverrides): Promise<void>;

    "initialize()"(overrides?: CallOverrides): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    setEnabled(_enabled: boolean, overrides?: CallOverrides): Promise<void>;

    "setEnabled(bool)"(
      _enabled: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setPeriod(
      _periodNumber: BigNumberish,
      _groupId: BigNumberish,
      _token: string,
      _merkleRoot: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "setPeriod(uint256,uint256,address,bytes32)"(
      _periodNumber: BigNumberish,
      _groupId: BigNumberish,
      _token: string,
      _merkleRoot: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setupConfig(_config: string, overrides?: CallOverrides): Promise<void>;

    "setupConfig(address)"(
      _config: string,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(
      _to: string,
      _token: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "withdraw(address,address,uint256)"(
      _to: string,
      _token: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    ConfigChanged(
      _user: string | null,
      _old: string | null,
      _new: string | null
    ): TypedEventFilter<
      [string, string, string],
      { _user: string; _old: string; _new: string }
    >;

    OwnerChanged(
      _user: string | null,
      _old: string | null,
      _new: string | null
    ): TypedEventFilter<
      [string, string, string],
      { _user: string; _old: string; _new: string }
    >;

    RewardClaimed(
      user: string | null,
      amount: null,
      periodNumber: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { user: string; amount: BigNumber; periodNumber: BigNumber }
    >;
  };

  estimateGas: {
    admin(overrides?: CallOverrides): Promise<BigNumber>;

    "admin()"(overrides?: CallOverrides): Promise<BigNumber>;

    changeOwner(
      _user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "changeOwner(address)"(
      _user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    checkPeriodMerkleRoot(
      _periodNumber: BigNumberish,
      _groupId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "checkPeriodMerkleRoot(uint256,uint256)"(
      _periodNumber: BigNumberish,
      _groupId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimReward(
      _periodNumber: BigNumberish,
      _groupId: BigNumberish,
      _amount: BigNumberish,
      _proof: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "claimReward(uint256,uint256,uint256,bytes32[])"(
      _periodNumber: BigNumberish,
      _groupId: BigNumberish,
      _amount: BigNumberish,
      _proof: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    config(overrides?: CallOverrides): Promise<BigNumber>;

    "config()"(overrides?: CallOverrides): Promise<BigNumber>;

    dev(overrides?: CallOverrides): Promise<BigNumber>;

    "dev()"(overrides?: CallOverrides): Promise<BigNumber>;

    enabled(overrides?: CallOverrides): Promise<BigNumber>;

    "enabled()"(overrides?: CallOverrides): Promise<BigNumber>;

    getBalance(_token: string, overrides?: CallOverrides): Promise<BigNumber>;

    "getBalance(address)"(
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPeriodInfo(
      _periodNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getPeriodInfo(uint256)"(
      _periodNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasClaimed(
      _periodNumber: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "hasClaimed(uint256,address)"(
      _periodNumber: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "initialize()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    setEnabled(
      _enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setEnabled(bool)"(
      _enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPeriod(
      _periodNumber: BigNumberish,
      _groupId: BigNumberish,
      _token: string,
      _merkleRoot: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setPeriod(uint256,uint256,address,bytes32)"(
      _periodNumber: BigNumberish,
      _groupId: BigNumberish,
      _token: string,
      _merkleRoot: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setupConfig(
      _config: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setupConfig(address)"(
      _config: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdraw(
      _to: string,
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "withdraw(address,address,uint256)"(
      _to: string,
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    admin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "admin()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    changeOwner(
      _user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "changeOwner(address)"(
      _user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    checkPeriodMerkleRoot(
      _periodNumber: BigNumberish,
      _groupId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "checkPeriodMerkleRoot(uint256,uint256)"(
      _periodNumber: BigNumberish,
      _groupId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimReward(
      _periodNumber: BigNumberish,
      _groupId: BigNumberish,
      _amount: BigNumberish,
      _proof: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "claimReward(uint256,uint256,uint256,bytes32[])"(
      _periodNumber: BigNumberish,
      _groupId: BigNumberish,
      _amount: BigNumberish,
      _proof: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    config(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "config()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    dev(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "dev()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    enabled(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "enabled()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getBalance(
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getBalance(address)"(
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPeriodInfo(
      _periodNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getPeriodInfo(uint256)"(
      _periodNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasClaimed(
      _periodNumber: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "hasClaimed(uint256,address)"(
      _periodNumber: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "initialize()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setEnabled(
      _enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setEnabled(bool)"(
      _enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPeriod(
      _periodNumber: BigNumberish,
      _groupId: BigNumberish,
      _token: string,
      _merkleRoot: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setPeriod(uint256,uint256,address,bytes32)"(
      _periodNumber: BigNumberish,
      _groupId: BigNumberish,
      _token: string,
      _merkleRoot: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setupConfig(
      _config: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setupConfig(address)"(
      _config: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      _to: string,
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "withdraw(address,address,uint256)"(
      _to: string,
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
